diff --git a/armv7-cache.txt b/armv7-cache.txt
new file mode 100644
index 0000000..38ac990
--- /dev/null
+++ b/armv7-cache.txt
@@ -0,0 +1,71 @@
+Checking simple C program: OK
+rpath library support: OK
+-Wl,--version-script support: OK
+Checking getconf LFS_CFLAGS: NO
+Checking for large file support without additional flags: OK
+Checking for -D_LARGE_FILES: OK
+Checking correct behavior of strtoll: NO
+Checking for working strptime: OK
+Checking for C99 vsnprintf: OK
+Checking for HAVE_SHARED_MMAP: OK
+Checking for HAVE_MREMAP: OK
+Checking for HAVE_INCOHERENT_MMAP: NO
+Checking for HAVE_SECURE_MKSTEMP: OK
+Checking for HAVE_IFACE_GETIFADDRS: OK
+Checking for HAVE_LITTLE_ENDIAN - runtime: OK
+Checking for HAVE_BIG_ENDIAN - runtime: NO
+Checking for kernel change notify support: OK
+Checking for Linux kernel oplocks: OK
+Checking for kernel share modes: OK
+Checking whether blkcnt_t is 32 bit: NO
+Checking whether blkcnt_t is 64 bit: OK
+Checking if can we convert from CP850 to UCS-2LE: OK
+Checking if can we convert from UTF-8 to UCS-2LE: OK
+Checking whether we can use Linux thread-specific credentials with 32-bit system calls: OK
+Checking whether we can use Linux thread-specific credentials: OK
+Checking whether setreuid is available: OK
+Checking whether setresuid is available: OK
+Checking whether seteuid is available: OK
+Checking whether fcntl locking is available: OK
+Checking for the maximum value of the 'time_t' type: OK
+Checking whether the realpath function allows a NULL argument: OK
+Checking whether POSIX capabilities are available: OK
+Checking for ftruncate extend: OK
+getcwd takes a NULL argument: OK
+Checking uname sysname type: "Linux"
+Checking uname machine type: "armv7l"
+Checking uname release type: "4.15.0-rc6"
+Checking uname version type: "#2 SMP Mon Jan 8 13:13:42 +05 2018"
+Checking for WORDS_BIGENDIAN: NO
+Checking size of bool: "1"
+Checking size of char: "1"
+Checking size of int: "4"
+Checking size of long long: "8"
+Checking size of long: "4"
+Checking size of short: "2"
+Checking size of size_t: "4"
+Checking size of ssize_t: "4"
+Checking size of int8_t: "1"
+Checking size of uint8_t: "1"
+Checking size of int16_t: "2"
+Checking size of uint16_t: "2"
+Checking size of int32_t: "4"
+Checking size of uint32_t: "4"
+Checking size of int64_t: "8"
+Checking size of uint64_t: "8"
+Checking size of void*: "4"
+Checking size of off_t: "8"
+Checking size of dev_t: "8"
+Checking size of ino_t: "8"
+Checking size of time_t: "4"
+Checking for intptr_t: ok
+Checking for uintptr_t: ok
+Checking for ptrdiff_t: ok
+Checking size of ((struct utmp *)NULL)->ut_line: "32"
+Checking value of NSIG: "65"
+Checking value of _NSIG: "65"
+Checking value of SIGRTMAX: "64"
+Checking value of SIGRTMIN: "34"
+vfs_fileid checking for statfs() and struct statfs.f_fsid: OK
+
+Checking whether the WRFILE-keytab is supported: OK
diff --git a/source3/lib/recvfile.c b/source3/lib/recvfile.c
old mode 100644
new mode 100755
index 403d5e8..14da346
--- a/source3/lib/recvfile.c
+++ b/source3/lib/recvfile.c
@@ -43,6 +43,164 @@
 #define TRANSFER_BUF_SIZE (128*1024)
 #endif
 
+#ifdef ALPHA_CUSTOMIZE
+#define SPLICE_F_COPY 0
+#define MAX_ITERATIONS 4
+#define RECEIVE_BUF_SIZE 131072
+#endif
+
+#define SPLICE_F_COPY 0
+#define MAX_ITERATIONS 4
+#define RECEIVE_BUF_SIZE 131072
+
+#if defined (CONFIG_COMCERTO_SMB_SPLICE)
+
+ssize_t smb_splice_read(int fd, int pipefd, size_t length)
+{
+	int nread = 0;
+	int to_read = length;
+
+	while (to_read > 0) {
+		nread = splice(fd, NULL, pipefd, NULL, to_read, SPLICE_F_MOVE | SPLICE_F_NONBLOCK);
+		if (nread == -1) {
+			// handling errors:
+			if (errno == EAGAIN) {
+				// EAGAIN : exit from the loop
+				// Pipe buffer is full, so let's go empty it
+				//DEBUG(0,("smb_splice_read EAGAIN\n"));
+				break;
+			} else if (errno == EINTR) {
+				// EINTR : do nothing
+				// process has been interrupted by a signal event, but pipe is not full, loop and start another read
+				//DEBUG(0,("smb_splice_read EINTR\n"));
+				continue;
+			} else  {
+				//DEBUG(0,("smb_splice_read %x %d\n", errno, to_read));
+				return -1;
+			}
+		} else 	if (nread == 0) {
+			//DEBUG(0,("smb_splice_read (nread == 0) %x %d\n", errno, to_read));
+			break;
+		}
+		to_read -= nread;
+	}
+
+	return length - to_read;
+}
+
+ssize_t smb_splice_write(int fd, int pipefd, loff_t *offset, size_t length)
+{
+	int written = 0;
+	int to_write = length;
+
+	while (to_write > 0) {
+		written = splice(pipefd, NULL, fd,
+				 offset, to_write,
+				 SPLICE_F_MOVE|SPLICE_F_MORE);
+		if (written == -1) {
+			// handling errors:
+			if (errno == EINTR) {
+				// EINTR : do nothing
+				// process has been interrupted by a signal event, but pipe is not full, loop and start another read
+				//DEBUG(0,("smb_splice_write EINTR\n"));
+				continue;
+			} else {
+				//DEBUG(0,("smb_splice_write %x %d\n",errno, to_write));
+				return -1;
+			}
+		}
+		to_write -= written;
+	}
+
+	return  length - to_write;
+}
+
+ssize_t sys_recvfile(int fromfd,
+			int tofd,
+			off_t offset,
+			size_t count)
+{
+/*
+ * 64K WA: increase number of pages in the splice pipe
+ * current LRO implementation only fills up pages up to 16K (1/4 of the page)	
+ */
+#define PIPE_BUF_SIZE		(32 * 65536) // 4 Mbytes, to be reduced
+#define SMB_SPLICE_BUF_SIZE	128 * 1024
+
+	static int pipefd[2] = {-1 , -1};
+	int saved_errno = 0;
+	size_t total_written = 0;
+	int to_write = count;
+	loff_t splice_offset = offset;
+
+	if (count == 0) {
+		return 0;
+	}
+
+	DEBUG(10,("sys_recvfile: from = %d, to = %d, "
+		"offset=%.0f, count = %lu\n",
+		fromfd, tofd, (double)offset,
+		(unsigned long)count));
+
+	if (pipefd[0] == -1)
+	{
+		/* open pipes*/
+		if (pipe(pipefd) < 0) {
+			return -1;
+		}
+
+		/* Only supported in Linux 2.6.35 and above */
+		fcntl(pipefd[0], F_SETPIPE_SZ, PIPE_BUF_SIZE);
+	}
+
+	while (to_write > 0) {
+		int nread, written;
+		nread = smb_splice_read(fromfd, pipefd[1], MIN(to_write, SMB_SPLICE_BUF_SIZE));
+		if(nread == -1) {
+			//DEBUG(0,("sys_recvfile (read) drain %x\n",to_write));
+			total_written = (count - to_write);
+			goto splice_error;
+		} else if ( (nread != MIN(to_write, SMB_SPLICE_BUF_SIZE)) && (errno != EAGAIN) ) {	
+			// error loss of connection
+			//DEBUG(0,("sys_recvfile (read) loss of connection drain %d\n",(to_write-nread)));
+			total_written = (count - to_write);
+			to_write-=nread; // this is used to drain the socket
+			goto splice_error;
+		}
+
+		written = smb_splice_write(tofd, pipefd[0], &splice_offset, nread);
+		// handling errors
+		if (written == -1) {
+			//DEBUG(0,("sys_recvfile (write) drain %d\n",to_write));
+			to_write-=nread; // this is used to drain the socket
+			total_written = -1;
+			goto splice_error;
+			
+		} else if (nread != written) {	
+			//DEBUG(0,("sys_recvfile (write) drain %d\n",to_write));
+			total_written = count - to_write + written;
+			to_write-=nread; // this is used to drain the socket
+			goto splice_error;
+		}
+		to_write -= written;
+	}
+
+	return (count - to_write);
+
+splice_error:
+	saved_errno = errno;
+	drain_socket(fromfd, to_write);
+	close(pipefd[0]);
+	close(pipefd[1]);
+	pipefd[0] = -1;
+	pipefd[1] = -1;
+	errno = saved_errno;
+
+	return total_written;
+}
+
+#else /* else CONFIG_COMCERTO_SMB_SPLICE*/
+
 static ssize_t default_sys_recvfile(int fromfd,
 			int tofd,
 			off_t offset,
@@ -152,17 +310,23 @@ static ssize_t default_sys_recvfile(int fromfd,
  * from the network in the case of return != -1.
  */
 
-
+#if ALPHA_CUSTOMIZE
 ssize_t sys_recvfile(int fromfd,
 			int tofd,
 			off_t offset,
 			size_t count)
 {
-	static int pipefd[2] = { -1, -1 };
-	static bool try_splice_call = false;
+//	static int pipefd[2] = { -1, -1 };
+	static bool try_splice_call = true;
 	size_t total_written = 0;
+	size_t current_count ;
 	loff_t splice_offset = offset;
 
+	if(get_remote_arch() == RA_OSX)
+	{
+		return default_sys_recvfile(fromfd, tofd, offset, count);
+	}
+
 	DEBUG(10,("sys_recvfile: from = %d, to = %d, "
 		"offset=%.0f, count = %lu\n",
 		fromfd, tofd, (double)offset,
@@ -186,20 +350,98 @@ ssize_t sys_recvfile(int fromfd,
 				count);
 	}
 
-	if ((pipefd[0] == -1) && (pipe(pipefd) == -1)) {
-		try_splice_call = false;
-		return default_sys_recvfile(fromfd, tofd, offset, count);
+	while (count > 0) {
+		int nread, try_again;
+
+		if (count > RECEIVE_BUF_SIZE){
+			current_count=RECEIVE_BUF_SIZE;
+		} else {
+			current_count=count;
+		}
+		try_again = MAX_ITERATIONS;
+		do {
+			nread = splice(fromfd, NULL, tofd, &offset, current_count, SPLICE_F_COPY);
+			if (nread == -1)
+				try_again--;	
+		} while(nread ==-1 && try_again);
+
+		if (nread == -1) {
+			if (total_written == 0 &&
+			    (errno == EBADF || errno == EINVAL)) {
+				try_splice_call = false;
+				return default_sys_recvfile(fromfd, tofd,
+							    offset, count);
+			}
+			break;
+		}
+		
+		total_written += nread;
+		count -= nread;
+	}
+
+ done:
+	if (count) {
+		int saved_errno = errno;
+		if (drain_socket(fromfd, count) != count) {
+			/* socket is dead. */
+			return -1;
+		}
+		errno = saved_errno;
+	}
+
+	return total_written;
+}
+#else
+ssize_t sys_recvfile(int fromfd,
+			int tofd,
+			off_t offset,
+			size_t count)
+{
+	static int pipefd[2] = { -1, -1 };
+	static bool try_splice_call = true;
+	size_t total_written = 0;
+	loff_t splice_offset = offset;
+	size_t current_count;
+
+	DEBUG(10,("sys_recvfile: from = %d, to = %d, "
+		"offset=%.0f, count = %lu\n",
+		fromfd, tofd, (double)offset,
+		(unsigned long)count));
+
+	if (count == 0) {
+		return 0;
+	}
+
+	/*
+	 * Older Linux kernels have splice for sendfile,
+	 * but it fails for recvfile. Ensure we only try
+	 * this once and always fall back to the userspace
+	 * implementation if recvfile splice fails. JRA.
+	 */
+
+	if (!try_splice_call) {
+		return default_sys_recvfile(fromfd,
+				tofd,
+				offset,
+				count);
 	}
 
 	while (count > 0) {
-		int nread, to_write;
+		int nread, try_again;
+
+		if (count > RECEIVE_BUF_SIZE){
+			current_count=RECEIVE_BUF_SIZE;
+		} else {
+			current_count=count;
+		}
+		try_again = MAX_ITERATIONS;
+		do {
+			nread = splice(fromfd, NULL, tofd, &offset, current_count, SPLICE_F_COPY);
+			if (nread == -1)
+				try_again--;	
+		} while(nread ==-1 && try_again);
 
-		nread = splice(fromfd, NULL, pipefd[1], NULL,
-			       MIN(count, 16384), SPLICE_F_MOVE);
 		if (nread == -1) {
-			if (errno == EINTR) {
-				continue;
-			}
 			if (total_written == 0 &&
 			    (errno == EBADF || errno == EINVAL)) {
 				try_splice_call = false;
@@ -221,19 +463,7 @@ ssize_t sys_recvfile(int fromfd,
 			}
 			break;
 		}
-
-		to_write = nread;
-		while (to_write > 0) {
-			int thistime;
-			thistime = splice(pipefd[0], NULL, tofd,
-					  &splice_offset, to_write,
-					  SPLICE_F_MOVE);
-			if (thistime == -1) {
-				goto done;
-			}
-			to_write -= thistime;
-		}
-
+		
 		total_written += nread;
 		count -= nread;
 	}
@@ -250,6 +480,10 @@ ssize_t sys_recvfile(int fromfd,
 
 	return total_written;
 }
+#endif
+
+
+
 #else
 
 /*****************************************************************
@@ -265,6 +499,8 @@ ssize_t sys_recvfile(int fromfd,
 }
 #endif
 
+#endif  /* END CONFIG_COMCERTO_SMB_SPLICE*/
+
 /*****************************************************************
  Throw away "count" bytes from the client socket.
  Returns count or -1 on error.
